@inject IHttpContextAccessor httpContextAccessor

<!DOCTYPE html>
<html lang="en"
      class='light-style layout-menu-fixed'
      data-theme="theme-default" data-assets-path='@((httpContextAccessor.HttpContext?.Request.PathBase ?? "") + "/")'
      data-framework="aspnetcore-mvc"
      data-template='vertical-menu-aspnet-core-mvc-template-free'>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        $(document).ready(function () {
            let processNotificationsTotal = 0;
            let employeeRequestNotificationsTotal = 0;

            function updateGrandTotal() {
                let grandTotal = processNotificationsTotal + employeeRequestNotificationsTotal;
                $('#TotalNotifications').text(grandTotal);
            }

            function fetchProcessNotifications() {
                $.ajax({
                    url: '@Url.Action("GetProcessNotifications", "Notifications")',
                    type: 'GET',
                    success: function (data) {
                        if (data.notifications) {
                            processNotificationsTotal = 0;

                            $.each(data.notifications, function (index, notification) {
                                const { processTypeID, processCount } = notification;

                                if (processCount > 0) {
                                    $('#count' + getNotificationName(processTypeID)).text(processCount);
                                    $('#li' + getNotificationName(processTypeID)).show();
                                }

                                processNotificationsTotal += processCount;
                            });

                            updateGrandTotal();
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error fetching process notifications: ", error);
                    }
                });
            }

            function fetchEmployeeRequestNotifications() {
                $.ajax({
                    url: '@Url.Action("GetEmployeeRequestNotifications", "Notifications")',
                    type: 'GET',
                    success: function (data) {
                        if (data.notifications) {
                            employeeRequestNotificationsTotal = 0;

                            $.each(data.notifications, function (index, notification) {
                                const { employeeRequestTypeID, employeeRequestCount } = notification;

                                if (employeeRequestCount > 0) {
                                    $('#count' + getemployeeRequestName(employeeRequestTypeID)).text(employeeRequestCount);
                                    $('#li' + getemployeeRequestName(employeeRequestTypeID)).show();
                                }

                                employeeRequestNotificationsTotal += employeeRequestCount;
                            });

                            updateGrandTotal();
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error fetching employee request notifications: ", error);
                    }
                });
            }
            const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub")
            .build();

            connection.on("ReceiveProcessNotification", function () {
                fetchProcessNotifications();
            });
            connection.on("ReceiveSuccessTrue", function (message) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: message,
                timer: 5000,
                showConfirmButton: false,
                  customClass: {
                    popup: 'swal-zindex'
                  }
                });
           });
           connection.on("ReceiveSuccessFalse", function (message) {
            Swal.fire({
                icon: 'error',
                title: 'error!',
                text: message,
                timer: 5000,
                showConfirmButton: false,
                  customClass: {
                    popup: 'swal-zindex'
                  }
                });
           });


            connection.start().then(function () {
            }).catch(function (err) {
                return console.error(err.toString());
            });

            function getNotificationName(processTypeID) {
                const names = [
                    '',          // 0 (not used)
                    'User',      // 1
                    'Employee',   // 2
                    'Contract',   // 3
                    'ContractRenewal', // 4
                    'EndofService', // 5
                    'Salary',     // 6
                    'Overtime',   // 7
                    'Allowance',   // 8
                    'Deduction',  // 9
                    'FixedDeduction', // 10
                    'Vacation',   // 11
                    'VacationSettle', // 12
                    'PayRoll',    // 13
                    'EmployeeRequest', // 14
                    'ABEmployeeRequest', // 15
                    'JournalVoucher', // 16
                    'TransferVoucher', // 17
                    'PaymentVoucher', // 18
                    'ReceivedVoucher', // 19
                    'MaterialRequisition', // 20
                    'NewPurchaseRequest', // 21
                    'EditedPurchaseRequest', // 22
                    'ApprovalForPurchaseOrder' // 23
                ];
                return names[processTypeID] || '';
            }

            function getemployeeRequestName(employeeRequestTypeID) {
                const names = [
                    '',          // 0 (not used)
                    'OvertimeRequest', // 1
                    'EarlyGoingRequest', // 2
                    'LateComingRequest', // 3
                    'TimesheetCorrectionRequest', // 4
                    'TravelExpensesRequest', // 5
                    'AccommodationExpenseRequest', // 6
                    'ReimbursementRequest', // 7
                    'ShiftTimingChangeRequest', // 8
                    'ShiftSwappingRequest', // 9
                    'WorkFromHomeRequest', // 10
                    'OfficeDeskRequest', // 11
                    'OfficeChairRequest', // 12
                    'FilingCabinetsRequest', // 13
                    'StorageShelvesRequest', // 14
                    'BookshelvesRequest', // 15
                    'MeetingTablesRequest', // 16
                    'ReceptionDeskRequest', // 17
                    'SideTablesRequest', // 18
                    'FootrestRequest', // 19
                    'LaptopsRequest', // 20
                    'DesktopComputersRequest', // 21
                    'MonitorsRequest', // 22
                    'LEDRequest', // 23
                    'KeyboardRequest', // 24
                    'MouseRequest', // 25
                    'ExternalHardDrivesRequest', // 26
                    'USBFlashDrivesRequest', // 27
                    'WebcamRequest', // 28
                    'HeadsetMicrophoneRequest', // 29
                    'PrintersRequest', // 30
                    'ScannersRequest', // 31
                    'ProjectorRequest', // 32
                    'ExternalSpeakersRequest', // 33
                    'ExternalMicrophoneRequest', // 34
                    'UPSRequest', // 35
                    'WiFiRouterRequest', // 36
                    'EthernetCablesRequest', // 37
                    'SwitchesAndHubsRequest', // 38
                    'LANCardsRequest', // 39
                    'ModemsRequest', // 40
                    'VPNDevicesRequest', // 41
                    'MousePadsRequest', // 42
                    'DeskLampsRequest', // 43
                    'LaptopCoolingPadsRequest', // 44
                    'PhoneStandsRequest', // 45
                    'PenHoldersDeskOrganizersRequest', // 46
                    'WhiteboardsNoticeBoardsRequest', // 47
                    'PresentationPointerClickerRequest', // 48
                    'PensPencilsRequest', // 49
                    'NotebooksStickyNotesRequest' // 50
                ];
                return names[employeeRequestTypeID] || '';
            }

            // Fetch notifications on page load
            fetchProcessNotifications();
            fetchEmployeeRequestNotifications();
        });

    </script>

    @if (TempData["SuccessMessage"] != null)

    {
        <div id="successMessage" class="alert alert-success" role="alert" style="display: none;">
            <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        TempData.Remove("SuccessMessage");

    }

    @if (TempData["ErrorMessage"] != null)

    {
        <div id="errorMessage" class="alert alert-danger" role="alert" style="display: none;">
            <i class="fas fa-exclamation-triangle"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
        TempData.Remove("ErrorMessage");

    }
    <div id="customSuccessAlert" class="alert alert-success" role="alert" style="display: none;">
        <i class="fas fa-exclamation-triangle"></i> <span id="customSuccessAlertText"></span>
        <button type="button" class="btn-close" onclick="hideAlert()" aria-label="Close"></button>
    </div>
    <div id="customErrorAlert" class="alert alert-danger" role="alert" style="display: none;">
        <i class="fas fa-exclamation-triangle"></i> <span id="customErrorAlertText"></span>
        <button type="button" class="btn-close" onclick="hideAlert()" aria-label="Close"></button>
    </div>
    @{
        string title = ViewData["title"] as string ?? "";
        string appName = TempData.Peek("appName") as string ?? "";
        string productPage = TempData.Peek("productPage") as string ?? "";
    }
    <title>@title | @appName</title>
    <meta name="description" content="" />

    <!-- Canonical SEO -->
    <link rel="canonical" href='@productPage'>
    <!-- Favicon -->
    <!-- <link rel="icon" type="image/x-icon" href="~/img/favicon/favicon.ico" /> -->
    <!-- Core Styles -->
    @await Html.PartialAsync("Sections/_Styles")

    <!-- Vendor Styles -->
    @RenderSection("VendorStyles", required: false)

    <!-- Page Styles -->
    @RenderSection("PageStyles", required: false)

    <!-- Include Scripts for customizer, helper, analytics, config -->
    @await Html.PartialAsync("Sections/_ScriptsIncludes")
</head>

<body>
    <!-- Layout Content -->
    @RenderBody()
    <!--/ Layout Content -->
    <!-- Core Scripts -->
    @await Html.PartialAsync("Sections/_Scripts")

    <!-- Vendor Scripts -->
    @RenderSection("VendorScripts", required: false)




    <!-- Main JS-->
    <script src='~/js/main.js'></script>

    <!-- Page Scripts-->
    @RenderSection("PageScripts", required: false)

    <!-- Place this tag in your head or just before your close body tag. -->
    <script async defer src="https://buttons.github.io/buttons.js"></script>

</body>

</html>
