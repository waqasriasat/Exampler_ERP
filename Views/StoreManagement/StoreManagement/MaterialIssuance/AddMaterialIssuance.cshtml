@model Exampler_ERP.Models.Temp.MaterialIssuancesIndexViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
<style>
    .ui-autocomplete {
        z-index: 1000 !important;
    }

    .center-button {
        margin-top: 32px;
        text-align: center;
    }

    .width-button {
        width: 120px;
    }

    .modal-header {
        padding: 1rem 1.5rem;
    }

    .table th,
    .table td {
        width: 20%; /* Adjust this percentage to match the inputs */
    }

    .form-label,
    .form-control,
    .form-select {
        width: 100%; /* Ensures the input elements stretch to match */
    }

    .table .inputcontrol {
        background-color: transparent;
        border: transparent;
    }

    .table .headercontrol {
        background-color: white;
        border: none;
    }

    .table .headerwidth {
        width: 60%;
    }

   
  
</style>

<div class="modal fade" id="addMaterialIssuanceModal" tabindex="-1" role="dialog" aria-labelledby="addMaterialIssuanceModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document" style="--bs-modal-width: 80rem;">
        <div class="modal-content">
            <div class="modal-header bg-warning text-white">
                <h5 class="modal-title" id="addMaterialIssuanceModalLabel"><i class="fas fa-key me-2"></i>@Localizer["lbl_Add"] Material Issuance</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addMaterialIssuanceForm" enctype="multipart/form-data" asp-action="Create" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <!-- Row for Inputs -->
                    <div class="row">

                        <div class="col-2 col-md-12 col-lg-6">
                            <label asp-for="MaterialIssuances.RequisitionID" class="form-label fw-bold">Pending Requisitions List</label>
                            <select asp-for="MaterialIssuances.RequisitionID" asp-items="@(new SelectList(ViewBag.PendingRequisitionsList, "Value", "Text", Model.MaterialIssuances.RequisitionID))" class="form-control form-control-lg custom-dropdown" id="requisitionId">
                                <option>@Localizer["lbl_Pleaseselect"]</option>
                            </select>
                            <span asp-validation-for="MaterialIssuances.RequisitionID" class="text-danger"></span>
                        </div>
                    </div>
                    <!-- Table for Added Rows -->
                    <div class="table-responsive mb-3">
                        <table id="MaterialIssuanceTable" class="table">
                            <thead>
                                <tr>
                                    <th>Item</th>
                                    <th>Requisition Quantity</th>
                                    <th>Issuance Quantity</th>
                                    <th>Available Stock Quantity</th>
                                    <th>@Localizer["lbl_Action"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Dynamic rows will be appended here -->
                            </tbody>
                        </table>

                    </div>

                    <!-- Remarks Section -->
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label asp-for="MaterialIssuances.Remarks" class="form-label fw-bold">Remarks</label>
                            <textarea asp-for="MaterialIssuances.Remarks" class="form-control" rows="3"></textarea>
                        </div>
                    </div>

                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["lbl_Close"]</button>
                <button type="button" id="saveNewMaterialIssuance" class="btn btn-success">@Localizer["lbl_Save"] </button>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        // Fetch data when clicking the button
        $('#requisitionId').change(function () {
            const requisitionId = $(this).val().trim();
            // Validate if a value is selected
            if (!requisitionId) {
                alert("Please select a valid Requisition ID.");
                return;
            }

            // AJAX call to fetch data when the selection changes
            $.ajax({
                url: '/MaterialIssuance/GetRequisitionDetails',
                type: 'GET',
                data: { requisitionId: requisitionId },
                    success: function (response) {
        const tableBody = $('#MaterialIssuanceTable tbody');
        tableBody.empty(); // Clear previous data
        if (response.success) {
            const data = response.data; // Assuming response.data contains the array
            console.log(response.data);
            if (data && data.length > 0) {
                data.forEach((row, rowIndex) => {
                    const itemID = row.itemID;
                    const itemName = row.itemName;
                    const requisitionQuantity = parseFloat(row.quantity) || 0;
                    const issuanceQuantity = 0;
                    const balanceQuantity = parseFloat(row.availableStock) || 0;

                    // Check if "Move to Purchase" button should be displayed
                    const moveToPurchaseButton = requisitionQuantity > balanceQuantity
                        ? `<button type="button" class="btn btn-sm btn-primary move-to-purchase width-button">Move to Purchase</button>`
                        : '';

                    // Create a dynamic row
                    const dynamicRow = `
                    <tr>
                        <td class="col-md-4">
                            <input type="hidden" name="MaterialIssuances.MaterialIssuanceDetails[${rowIndex}].ItemID" value="${itemID}" />
                            <input type="text" class="form-control inputcontrol" value="${itemName}" readonly />
                        </td>
                        <td>
                            <input type="text" class="form-control inputcontrol" name="MaterialIssuances.MaterialIssuanceDetails[${rowIndex}].RequisitionQuantity" value="${requisitionQuantity}" readonly />
                        </td>
                        <td>
                            <input type="text" class="form-control" name="MaterialIssuances.MaterialIssuanceDetails[${rowIndex}].IssuanceQuantity" value="${issuanceQuantity}" />
                        </td>
                        <td>
                            <input type="text" class="form-control inputcontrol" name="MaterialIssuances.MaterialIssuanceDetails[${rowIndex}].BalanceQuantity" value="${balanceQuantity}" readonly />
                        </td>
                        <td>
                            <button type="button" class="btn btn-sm btn-danger remove-row width-button">@Localizer["lbl_Remove"]</button>
                            ${moveToPurchaseButton}
                        </td>
                    </tr>`;
                    // Append the row to the table body
                    tableBody.append(dynamicRow);
                });
            } else {
                alert("No data found for the selected Requisition ID.");
            }
        } else {
            alert(response.message || "Failed to fetch data.");
        }
    },

                error: function (xhr, status, error) {
                    console.error("Error:", error);
                    alert("An error occurred while fetching data. Please try again.");
                }
            });
        });
           $(document).on('input', 'input[name^="MaterialIssuances.MaterialIssuanceDetails"][name$=".IssuanceQuantity"]', function () {
        const $row = $(this).closest('tr');
        const issuanceQuantity = parseFloat($(this).val()) || 0;
        const requisitionQuantity = parseFloat($row.find('input[name^="MaterialIssuances.MaterialIssuanceDetails"][name$=".RequisitionQuantity"]').val()) || 0;
        const balanceQuantity = parseFloat($row.find('input[name^="MaterialIssuances.MaterialIssuanceDetails"][name$=".BalanceQuantity"]').val()) || 0;

        // Check against RequisitionQuantity instead of BalanceQuantity
        if (issuanceQuantity > requisitionQuantity) {
            alert("Issuance Quantity cannot be greater than Requisition Quantity.");
            $(this).val(requisitionQuantity); // Reset to Requisition Quantity
        } else if (issuanceQuantity > balanceQuantity) {
            alert("Issuance Quantity cannot be greater than Balance Quantity.");
            $(this).val(balanceQuantity); // Reset to Balance Quantity
        }
    });

        // Remove a row from the Material Issuance table
        $(document).on('click', '.remove-row', function () {
            $(this).closest('tr').remove();

            // Update name attributes for proper binding
            $('#MaterialIssuanceTable tbody tr').each(function (index) {
                $(this).find('input, select').each(function () {
                    const name = $(this).attr('name');
                    if (name) {
                        const updatedName = name.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', updatedName);
                    }
                });
            });
        });
    });
        $(document).on("click", ".move-to-purchase", function () {
        var row = $(this).closest("tr"); // Get the current row
        var itemID = row.find("input[name*='ItemID']").val();
        var requisitionQuantity = parseFloat(row.find("input[name*='RequisitionQuantity']").val()) || 0;
        var balanceQuantity = parseFloat(row.find("input[name*='BalanceQuantity']").val()) || 0;
        var purchaseQuantity = requisitionQuantity - balanceQuantity; // Needed Quantity

        if (purchaseQuantity > 0) {
            $.ajax({
                url: "/MaterialIssuance/CreatePurchaseRequest", // Change URL as per your route
                type: "POST",
                data: { ItemID: itemID, Quantity: purchaseQuantity },
                success: function (response) {
                    if (response.success) {
                        alert("Item moved to purchase successfully!");
                        row.find(".move-to-purchase").remove(); // Remove button after action
                    } else {
                        alert("Failed to move item to purchase: " + response.message);
                    }
                },
                error: function () {
                    alert("An error occurred while processing.");
                }
            });
        } else {
            alert("Invalid quantity for purchase.");
        }
    });

</script>
